#pragma once

#ifndef _DISK_H_
#define _DISK_H_

#include "constant.h"


//____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
// Address
_data MapAddress(_logic address);
_logic GetChunkAddress(_chunk chunk);
_logic GetDataCAddress(_chunk dataC);
_logic GetInodeAddress(_inode inode);


// Bitmap
_bool IsCellFree(Bitmap bm, _id i);                                 // IsCellFree
_flag FreeCell(Bitmap bm, _id i);
_id GetFreeCell(Bitmap bm);
void PrintBitmap(Bitmap bm);


// Read-Write-Debug
_flag _Write(_logic address, _data data, _size size);                 // _Write
_data _Read(_logic address, _size size);
_flag _Copy(_data _dst, _logic address, _size size);                             // _Read
void _Print(_logic address, _size size);                                 // _Print
_flag _Free(_logic address, _size size);


// Operate with 1 chunk
_chunk WriteS(_data data, _size size);                        // Write        
_size UpdateS(_chunk chunk, _data data, _size size);
_data ReadS(_chunk chunk);
_flag CopyS(_data _dst, _chunk chunk);
void PrintS(_chunk chunk);
_flag FreeS(_chunk chunk);
_size SizeS(_chunk chunk);


// Operate with multiple chunk
_chunk* WriteM(_data data, _size size);                     // Write
_data ReadM(_chunk chunk[]);                                  // Read
_flag CopyM(_byte _dst[], _chunk chunk[]);
void PrintM(_chunk chunk[]);
_flag FreeM(_chunk chunk[]);
_size SizeM(_chunk chunk[]);                                  // Sized
_chunk* PackM(_chunk chunk[]);

//____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
// Operation with Inodes
Inode CreateInode(_file type);
_flag WriteInode(Inode* inode);                                      // UpdateInode
Inode ReadInode(_inode inode);                                 // GetInode

_flag _PackInodeBlocks(Inode* inode);
_id _FindFreePointer(Inode* inode);
_size _GetTotalFreePointerSize(Inode* inode);
_flag WriteInodeBlocks(Inode* inode, _data data, _size size);

_flag FreeInode(_inode inode);
void PrintInodeFromDisk(_inode inode);                          // PrintChunk
void PrintInode(Inode* inode);
InodeTable CreateInodeTable(_inode inodeNumber, char* name);
void PrintInodeTableFromDisk(_chunk chunk);
void PrintInodeTable(InodeTable* table);

#endif